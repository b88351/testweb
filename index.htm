<!DOCTYPE html>
<html>
  <head>
    <title>Google Calendar API Quickstart</title>
    <meta charset="utf-8" >
  </head>
  <body>
    <p>Google Calendar API Quickstart</p>
<p></p>
<!--
	<iframe src="https://calendar.google.com/calendar/embed?height=600&amp;wkst=2&amp;bgcolor=%23ffffff&amp;ctz=Asia%2FTaipei&amp;src=NGtrcGExdmZyMXF0dWg1cDRlc2RlcjFuNW9AZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ&amp;color=%23A79B8E&amp;showTitle=0&amp;showNav=1&amp;showDate=1&amp;showPrint=0&amp;showTabs=1&amp;showCalendars=1&amp;showTz=0&amp;mode=WEEK" style="border:solid 1px #777" width="800" height="800" frameborder="0" scrolling="no"></iframe>
-->

    <!--Add buttons to initiate auth sequence and sign out-->
    <button id="authorize_button" style="display: none;">Authorize</button>
    <button id="signout_button" style="display: none;">Sign Out</button>
    <button id="show_ScheduleWeek" style="display: none;">Show schedule for week</button>
	<button id="insert_Event" style="display: true;">Insert Event</button>
	<button id="Test" style="display: true;"> 測試 </button>
	
    <pre id="content" style="white-space: pre-wrap;"></pre>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <script type="text/javascript">
      // Client ID and API key from the Developer Console
      var CLIENT_ID = '142701978725-i036ql23qnh5qeit4jrcn9v7q7cc9j2f.apps.googleusercontent.com';
      var API_KEY = 'AIzaSyA9IbdhG7kc7yDBy1DRy8blkodbifzebDw';
	  var CALENDAR_ID = '4kkpa1vfr1qtuh5p4esder1n5o@group.calendar.google.com';
	  var CLIENT_SECRET = '3obibi5X-FRvvE8Ohkk5rnJh';

      // Array of API discovery doc URLs for APIs used by the quickstart
      var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"];

      // Authorization scopes required by the API; multiple scopes can be
      // included, separated by spaces.
      var SCOPES = "https://www.googleapis.com/auth/calendar";

      var authorizeButton = document.getElementById('authorize_button');
      var signoutButton = document.getElementById('signout_button');
	  var showscheduleweekButton = document.getElementById('show_ScheduleWeek');
	  var inserteventButton = document.getElementById('insert_Event');
	  var testButton = document.getElementById('Test');

	  //template insert event
	  var TIME_ZONE = 'Asia/Taipei';
// 	  var insertEventD = {
// 	    'calendarId': 'primary',
// 	    'start': {
// 	  	'dateTime': '2020-11-30T07:30:00+08:00',
// 	  	'timeZone': TIME_ZONE
// 	    },
// 	    'end': {
// 	  	'dateTime': '2020-11-30T16:30:00+08:00',
// 	  	'timeZone': TIME_ZONE
// 	    }
// 	    // 'recurrence': [
// 	  	// 'RRULE:FREQ=DAILY;COUNT=2'
// 	    // ],
// 	    // 'attendees': [
// 	  	// {'email': 'b88351@gmail.com'},
// 	  	// {'email': 'c88351@gmail.com'}
// 	    // ]
// 	  };
// 
      /**
       *  On load, called to load the auth2 library and API client library.
       */
      function handleClientLoad() {
        gapi.load('client:auth2', initClient);
      }

      /**
       *  Initializes the API client library and sets up sign-in state
       *  listeners.
	   
	   		  client_secret: CLIENT_SECRET,

       */
      function initClient() {
        gapi.client.init({
          apiKey: API_KEY,
          clientId: CLIENT_ID,
          discoveryDocs: DISCOVERY_DOCS,
          scope: SCOPES
        }).then(function () {
          // Listen for sign-in state changes.
          gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);

          // Handle the initial sign-in state.
          updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
          authorizeButton.onclick = handleAuthClick;
          signoutButton.onclick = handleSignoutClick;
		  inserteventButton.onclick = loadCalendarApi;//getCalendarEvents;
		  testButton.onclick = testFunc;
        }, function(error) {
          appendPre(JSON.stringify(error, null, 2));
        });
      }

      /**
       *  Called when the signed in status changes, to update the UI
       *  appropriately. After a sign-in, the API is called.
       */
      function updateSigninStatus(isSignedIn) {
        if (isSignedIn) {
          authorizeButton.style.display = 'none';
          signoutButton.style.display = 'block';
          // listUpcomingEvents();
        } else {
          authorizeButton.style.display = 'block';
          signoutButton.style.display = 'none';
        }
      }

      /**
       *  Sign in the user upon button click.
       */
      function handleAuthClick(event) {
        gapi.auth2.getAuthInstance().signIn();
      }

      /**
       *  Sign out the user upon button click.
       */
      function handleSignoutClick(event) {
        gapi.auth2.getAuthInstance().signOut();
      }

      /**
       * Append a pre element to the body containing the given message
       * as its text node. Used to display the results of the API call.
       *
       * @param {string} message Text to be placed in pre element.
       */
      function appendPre(message) {
        var pre = document.getElementById('content');
        var textContent = document.createTextNode(message + '\n');
        pre.appendChild(textContent);
      }

      /**
       * Print the summary and start datetime/date of the next ten events in
       * the authorized user's calendar. If no events are found an
       * appropriate message is printed.
       */
      function listUpcomingEvents() {
        request = gapi.client.calendar.events.list({
          'calendarId': CALENDAR_ID,
          'singleEvents': true,
          'maxResults': 30,
          'orderBy': 'startTime'
        });	
		alert(JSON.stringify(request));
		request.execute(function(event) {
            appendPre('Event created: ' + JSON.stringify(event));
        });
		alert('010');
      }
	  
	  
	  function loadCalendarApi() {
        gapi.client.load('calendar', 'v3', insertEvent);
	  }
	  function insertEvent() {
		  var TIME_ZONE = 'Asia/Taipei';
		  var insertEventD = {
			'summary': 'Test',
			'calendarId': CALENDAR_ID,
			'colorId': 8,
			'start': {
			'dateTime': '2020-12-02T07:30:00+08:00',
			'timeZone': TIME_ZONE
			},
			'end': {
			'dateTime': '2020-12-02T16:30:00+08:00',
			'timeZone': TIME_ZONE
			}
		  };
	  
		var request = gapi.client.calendar.events.insert({
			'calendarId': CALENDAR_ID,
			'resource': insertEventD
			});
		// alert(JSON.stringify(request));
		request.execute(function(event) {
			appendPre('Event created: ' + JSON.stringify(event));
		});
	  }
	  function getCalendarEvents() {
		  alert('555');
		  gapi.client.load('calendar', 'v3', getEvents);
      }
	  function getEvents() {
		var EventsD = {
            'calendarId': CALENDAR_ID,
            'maxResults': 30,
            'orderBy': 'startTime',
            'singleEvents': true
          };

        var request = gapi.client.calendar.calendarList.list({
			apiKey: API_KEY,
			discoveryDocs: DISCOVERY_DOCS,
			scope: SCOPES,
            calendarId: CALENDAR_ID,
            });
        alert(JSON.stringify(request));
        request.execute(function(event) {
            appendPre('Event created: ' + JSON.stringify(event));
        });
	  }	
	  
	  //get the first day of the week from current date
	  function getMonday(d) {
		d = new Date(d);
		var day = d.getDay(),
		  diff = d.getDate() - day + (day == 0 ? -6:1); // adjust when day is sunday
		return new Date(d.setDate(diff));
	  }
	  //get the first day of the next week from current date
	  function getNextMonday(d) {
		d = new Date(d);
		var day = d.getDay(),
		  diff = d.getDate() - day + (day == 0 ? -6:1) + 7; // adjust when day is sunday
		return new Date(d.setDate(diff));
	  }
	  //Create Event by d Date
	  function insertEventByDate(d) {
		  var TIME_ZONE = 'Asia/Taipei';
		
		  //var nowda = new Date(Date.now());
		  //appendPre('Original Date: ' + JSON.stringify(nowda));		

		  appendPre('Original Date: ' + JSON.stringify(d));
		  //appendPre('UTC Date: ' + JSON.stringify(d.getUTCHours()));
		  
		  //Morning shift
		  dStart = new Date(d);
		  dStart.setHours(7,30,00);//dStart.setMinutes(30);dStart.setSeconds(0);
		  dStart.setTime(dStart.getTime() + (8*60*60*1000));// Add Time zone +08:00 (8 x Min x Sec x 1000)

		  dEnd = new Date();
		  //dEnd.setHours(16,30,00);//dEnd.setMinutes(30);dEnd.setMinutes(30);dEnd.setSeconds(0);
		  //dEnd.setTime(dEnd.getTime() + (8*60*60*1000));// Add Time zone +08:00 (8 x Min x Sec x 1000)

		  //appendPre('Insert: ' + JSON.stringify(dStart) + ' ~ ' + JSON.stringify(dEnd));
		  //appendPre('InsertISOD: ' + dStart.toISOString() + ' ~ ' + dEnd.toISOString());
		
		  var staffName    = ['燕芳','青翰','威宏','翊潔','詠瀚','岳洋'];
		  // ColorId https://lukeboyle.com/blog-posts/2016/04/google-calendar-api---color-id
		  var staffColorId = [    11,     5,     9,     4,     8,     2];
		  //appendPre('staffName :' + JSON.stringify(staffName.length));// 6


//		  // Way 2
		  var request;
		  var events=[];
		  for(var i = 0; i < 7; i++) {
			  for(var j = 0; j < staffName.length; j++) {
				dEnd.setTime(dStart.getTime() + (9 * 60 * 60 * 1000));// 9 hrs work times
				var insertEventsD = {
				  'summary': staffName[j],
				  'calendarId': CALENDAR_ID,
				  'colorId': staffColorId[j],
				  'start': {
				  'dateTime': JSON.stringify(dStart).substring(1,20)+ '+08:00',
				  'timeZone': TIME_ZONE
				  },
				  'end': {
				  'dateTime': JSON.stringify(dEnd).substring(1,20) + '+08:00',
				  'timeZone': TIME_ZONE
				  }};
				events[i * 6 + j]=insertEventsD;

//				appendPre('events'+ j + JSON.stringify(events[j]));

//				request = function(resource) {  // Function that returns a request.
//				  return gapi.client.calendar.events.insert({
//					'calendarId': CALENDAR_ID,
//					  'resource': events[j]
//					});
//				  }(events[j]);  // Bind to the current event.
//				  request.execute(function(resp) {
//					appendPre('request: ' + JSON.stringify(resp));
//				});
			  }
			  dStart.setTime(dStart.getTime() + (1 * 24 * 60 * 60 * 1000));

		  }

		  for(var jj = 0; jj < events.length; jj++) {
//			appendPre('events['+ jj +  ']' + JSON.stringify(events[jj]));
			  request = function(resource) {  // Function that returns a request.
				return gapi.client.calendar.events.insert({
					'calendarId': CALENDAR_ID,
					'resource': events[jj]
					});
			  }(events[jj]);  // Bind to the current event.
			  request.execute(function(resp) {
					appendPre('request: ' + JSON.stringify(resp));
			  });
		  }



//-------------------------------------------------------------		  
//		  var insertEventsD = [{
//			'summary': '岳洋',
//			'calendarId': CALENDAR_ID,
//			'colorId': 8,
//			'start': {
//			'dateTime': JSON.stringify(dStart).substring(1,20) + '+08:00',
//			'timeZone': TIME_ZONE
//			},
//			'end': {
//			'dateTime': JSON.stringify(dEnd).substring(1,20) + '+08:00',
//			'timeZone': TIME_ZONE
//			}
//		  }];
//		  appendPre('InsertD: ' + JSON.stringify(insertEventsD));
		  
//		  const batch = gapi.client.newBatch();
//		  staffName.map((r, j) => {
//			var insertEventsD = {
//			  'summary': staffName[j],
//			  'calendarId': CALENDAR_ID,
//			  'colorId': staffColorId[j],
//			  'start': {
//			  'dateTime': JSON.stringify(dStart).substring(1,20) + '+08:00',
//			  'timeZone': TIME_ZONE
//			  },
//			  'end': {
//			  'dateTime': JSON.stringify(dEnd).substring(1,20) + '+08:00',
//			  'timeZone': TIME_ZONE
//			  }
//			};
//
//			appendPre('staffName: ' + JSON.stringify(staffName[j]));
//			appendPre('insertEventsD: ' + JSON.stringify(insertEventsD));
//			batch.add(
//			  gapi.client.calendar.events.insert({
//			  'calendarId': 'CALENDAR_ID',
//			  'resource': insertEventsD
//			  appendPre('staffName: ' + JSON.stringify(staffName[j]))
//		    );
//		  batch.then(function(){
//			appendPre('all jobs now dynamically done!!!')
//		  })
//		  // Using execute
//		  batch.execute(function() {
//				appendPre('execute')
//				// This callback not called if batchContainers fails
//			});
//			// Using then
//			batch.then(function() {
//				appendPre('then')
//				// Request callbacks not called
//			});
//		// insert one event
//		var request = gapi.client.calendar.events.insert({
//			'calendarId': CALENDAR_ID,
//			'resource': insertEventD
//			});
//		// alert(JSON.stringify(request));
//		request.execute(function(event) {
//			appendPre('Event created: ' + JSON.stringify(event));
//		});
	  }
	  
	  //Sample Code from https://developers.google.com/calendar/quickstart/js
	  function listUpcomingEvents() {
        gapi.client.calendar.events.list({
          'calendarId': 'primary',
          'timeMin': (new Date()).toISOString(),
          'showDeleted': false,
          'singleEvents': true,
          'maxResults': 10,
          'orderBy': 'startTime'
        }).then(function(response) {
          var events = response.result.items;
          appendPre('Upcoming events:');

          if (events.length > 0) {
            for (i = 0; i < events.length; i++) {
              var event = events[i];
              var when = event.start.dateTime;
              if (!when) {
                when = event.start.date;
              }
              appendPre(event.summary + ' (' + when + ')')
            }
          } else {
            appendPre('No upcoming events found.');
          }
        });
      }
	  
	  //Test
	  function testFunc() {
		d = new Date();
		d = getNextMonday(d);
		gapi.client.load('calendar', 'v3', insertEventByDate(d));
	  }	 
    </script>

    <script async defer src="https://apis.google.com/js/api.js"
      onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()" charset = "UTF-8">
    </script>
  </body>
</html>