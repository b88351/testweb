<!DOCTYPE html>
<html>
  <head>
    <title>Google Calendar API Quickstart</title>
    <meta charset="utf-8" />
  </head>
  <body>
    <p>Google Calendar API Quickstart</p>

    <!--Add buttons to initiate auth sequence and sign out-->
    <button id="authorize_button" style="display: none;">Authorize</button>
    <button id="signout_button" style="display: none;">Sign Out</button>
    <button id="show_ScheduleWeek" style="display: none;">Show schedule for week</button>
	<button id="insert_Event" style="display: true;">Insert Event</button>
<p></p>
	<iframe src="https://calendar.google.com/calendar/embed?height=600&amp;wkst=2&amp;bgcolor=%23ffffff&amp;ctz=Asia%2FTaipei&amp;src=NGtrcGExdmZyMXF0dWg1cDRlc2RlcjFuNW9AZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ&amp;color=%23A79B8E&amp;showTitle=0&amp;showNav=1&amp;showDate=1&amp;showPrint=0&amp;showTabs=1&amp;showCalendars=1&amp;showTz=0&amp;mode=WEEK" style="border:solid 1px #777" width="800" height="800" frameborder="0" scrolling="no"></iframe>

    <pre id="content" style="white-space: pre-wrap;"></pre>

    <script type="text/javascript">
      // Client ID and API key from the Developer Console
      var CLIENT_ID = '142701978725-i036ql23qnh5qeit4jrcn9v7q7cc9j2f.apps.googleusercontent.com';
      var API_KEY = 'AIzaSyCQN-ai7bDGaMbE3D_vBeWWBGbEEacrwyw';
	  var CALENDAR_ID = '4kkpa1vfr1qtuh5p4esder1n5o@group.calendar.google.com';

      // Array of API discovery doc URLs for APIs used by the quickstart
      var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"];

      // Authorization scopes required by the API; multiple scopes can be
      // included, separated by spaces.
      var SCOPES = "https://www.googleapis.com/auth/calendar";

      var authorizeButton = document.getElementById('authorize_button');
      var signoutButton = document.getElementById('signout_button');
	  var showscheduleweekButton = document.getElementById('show_ScheduleWeek');
	  var inserteventButton = document.getElementById('insert_Event');

	  //template insert event
	  var TIME_ZONE = 'Asia/Taipei';
// 	  var insertEventD = {
// 	    'calendarId': 'primary',
// 	    'start': {
// 	  	'dateTime': '2020-11-30T07:30:00+08:00',
// 	  	'timeZone': TIME_ZONE
// 	    },
// 	    'end': {
// 	  	'dateTime': '2020-11-30T16:30:00+08:00',
// 	  	'timeZone': TIME_ZONE
// 	    }
// 	    // 'recurrence': [
// 	  	// 'RRULE:FREQ=DAILY;COUNT=2'
// 	    // ],
// 	    // 'attendees': [
// 	  	// {'email': 'b88351@gmail.com'},
// 	  	// {'email': 'c88351@gmail.com'}
// 	    // ]
// 	  };
// 
      /**
       *  On load, called to load the auth2 library and API client library.
       */
      function handleClientLoad() {
        gapi.load('client:auth2', initClient);
      }

      /**
       *  Initializes the API client library and sets up sign-in state
       *  listeners.
       */
      function initClient() {
        gapi.client.init({
          apiKey: API_KEY,
          clientId: CLIENT_ID,
          discoveryDocs: DISCOVERY_DOCS,
          scope: SCOPES
        }).then(function () {
          // Listen for sign-in state changes.
          gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);

          // Handle the initial sign-in state.
          updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
          authorizeButton.onclick = handleAuthClick;
          signoutButton.onclick = handleSignoutClick;
		  alert('123');
		  inserteventButton.onclick = getCalendarEvents;
        }, function(error) {
          appendPre(JSON.stringify(error, null, 2));
        });
      }

      /**
       *  Called when the signed in status changes, to update the UI
       *  appropriately. After a sign-in, the API is called.
       */
      function updateSigninStatus(isSignedIn) {
        if (isSignedIn) {
          authorizeButton.style.display = 'none';
          signoutButton.style.display = 'block';
          listUpcomingEvents();
        } else {
          authorizeButton.style.display = 'block';
          signoutButton.style.display = 'none';
        }
      }

      /**
       *  Sign in the user upon button click.
       */
      function handleAuthClick(event) {
        gapi.auth2.getAuthInstance().signIn();
      }

      /**
       *  Sign out the user upon button click.
       */
      function handleSignoutClick(event) {
        gapi.auth2.getAuthInstance().signOut();
      }

      /**
       * Append a pre element to the body containing the given message
       * as its text node. Used to display the results of the API call.
       *
       * @param {string} message Text to be placed in pre element.
       */
      function appendPre(message) {
        var pre = document.getElementById('content');
        var textContent = document.createTextNode(message + '\n');
        pre.appendChild(textContent);
      }

      /**
       * Print the summary and start datetime/date of the next ten events in
       * the authorized user's calendar. If no events are found an
       * appropriate message is printed.
       */
      function listUpcomingEvents() {
        gapi.client.calendar.events.list({
          'calendarId': CALENDAR_ID,
          'timeMin': (new Date()).toISOString(),
          'showDeleted': false,
          'singleEvents': true,
          'maxResults': 10,
          'orderBy': 'startTime'
        }).then(function(response) {
          var events = response.result.items;
          appendPre('Upcoming events:');

          if (events.length > 0) {
            for (i = 0; i < events.length; i++) {
              var event = events[i];
              var when = event.start.dateTime;
              if (!when) {
                when = event.start.date;
              }
              appendPre(event.summary + ' (' + when + ')')
            }
          } else {
            appendPre('No upcoming events found.');
          }
        });		
      }
	  
	  
	  function loadCalendarApi() {
        gapi.client.load('calendar', 'v3', insertEvent);
	  }
	  function insertEvent() {
		  var TIME_ZONE = 'Asia/Taipei';
		  var insertEventD = {
			'summary': 'Test',
			'calendarId': CALENDAR_ID,
			'start': {
			'dateTime': '2020-11-30T07:30:00+08:00',
			'timeZone': TIME_ZONE
			},
			'end': {
			'dateTime': '2020-11-30T16:30:00+08:00',
			'timeZone': TIME_ZONE
			}
		  };
	  
		var request = gapi.client.calendar.events.insert({
			'calendarId': 'primary',
			'resource': insertEventD
			});
		// alert(JSON.stringify(request));
		request.execute(function(event) {
			appendPre('Event created: ' + JSON.stringify(event));
		});
	  }
	  function getCalendarEvents() {
	  		alert('123');

        gapi.client.load('calendar', 'v3', getEvents);
	  }
	  function getEvents() {
		var EventsD = {
			'calendarId': CALENDAR_ID,
			'maxResults': 30,
			'orderBy': 'startTime',
		  };
			'singleEvents': true
		var request = gapi.client.calendar.events.insert({
			'calendarId': 'primary',
			'resource': EventsD
			});
		alert(JSON.stringify(request));
		request.execute(function(event) {
			appendPre('Event created: ' + JSON.stringify(event));
		});
	  }
    </script>

    <script async defer src="https://apis.google.com/js/api.js"
      onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
  </body>
</html>